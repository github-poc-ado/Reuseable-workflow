name: Java Maven Workflow
on: 
  workflow_call:
    inputs:
      REGISTRY_NAME:
        required: true
        type: string
      CLUSTER_NAME:
        required: true
        type: string
      CLUSTER_RESOURCE_GROUP:
        required: true
        type: string
      NAMESPACE:
        required: true
        type: string
    secrets:
      token:
        required: true
      username:
        required: true
      password:
        required: true
      creds:
        required: true
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name: Maven Build
        run: mvn --batch-mode --update-snapshots install
      - name: 'Dependency Review'
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate        
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
          name: java-app
          path: '${{ github.workspace }}/target/*.jar'                
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Junit Test
        run: mvn --batch-mode --update-snapshots test
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files:
            target/surefire-reports/*.xml   
  integration-test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Junit Integration Test
        run: mvn --batch-mode --update-snapshots verify
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files:
            target/surefire-reports/*.xml     
  codeql-dependabot-report:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
      - name: Generate Security Report
        #uses: peter-murray/github-security-report-action@v2
        uses: rsdmike/github-security-report-action@v3.0.4
        with:
          token: ${{ secrets.token }}  
          sarifReportDir: "../results"
          outputDir: ${{ github.workspace }}
          repository: ${{ github.repository }}
      - name: Upload Security Report
        uses: actions/upload-artifact@v2
        with:
          name: security-report
          path: '${{ github.workspace }}/*.pdf' 
    
  deploy:
    # Environment variables available to all jobs and steps in this workflow
    env:
      REGISTRY_NAME: '${{ inputs.REGISTRY_NAME }}'
      CLUSTER_NAME: '${{ inputs.CLUSTER_NAME }}'
      CLUSTER_RESOURCE_GROUP: '${{ inputs.CLUSTER_RESOURCE_GROUP }}'
      NAMESPACE: '${{ inputs.NAMESPACE }}'
    runs-on: ubuntu-latest
    environment: dev
    needs:
      - build
      - test 
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Docker Login (Connect to Azure Container registry (ACR))
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.username }} 
        #username: ${{ secrets.REGISTRY_USERNAME }} 
        password: ${{ secrets.password }}
       #password: ${{ secrets.REGISTRY_PASSWORD }}
    - name: Container build and push to a Azure Container registry (ACR)
      run: |
        docker build . -t ${{ env.REGISTRY_NAME }}.azurecr.io/myimage:${{ github.sha }}
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/myimage:${{ github.sha }}  
    - name: Set Up AKS
      uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.creds }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}   
    - name: Create namespace if doesn't exist
      run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -
    - name: Create imagepullsecret for Azure Container registry (ACR)
      uses: azure/k8s-create-secret@v1
      with:
        container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
        container-registry-username: ${{ secrets.username }}
        container-registry-password: ${{ secrets.password }}
        secret-name: ${{ env.REGISTRY_NAME }}-registry-connection
        namespace: ${{ env.NAMESPACE }}
    #ContinueFromHere-->
    # Deploy app to AKS
    - uses: azure/k8s-deploy@v1
      with:
        manifests: |
          manifests/deployment.yml
          manifests/service.yml
        images: |
          ${{ env.REGISTRY_NAME }}.azurecr.io/myimage:${{ github.sha }}
        imagepullsecrets: |
          ${{ env.REGISTRY_NAME }}-registry-connection
        namespace: ${{ env.NAMESPACE }}
      
