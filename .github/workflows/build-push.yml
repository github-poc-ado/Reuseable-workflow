name: Java Maven Workflow
on: 
  push:
    paths:
      - "src/docker/**"
    branches:
      - main
      - testing
  workflow_call:
    inputs:
      java_version:
        type: string
        description: Java Version
        required: true
        default: '11'   
      advancedSecurityEnabled:
        type: boolean
        description: GitHub Advanced Security
        default: true
        
    secrets:
      token:
        required: false
      REGISTRY_NAME:
        required: true
      REGISTRY_USERNAME:
        required: true
      REGISTRY_PASSWORD:
        required: true
      AZURE_CREDENTIALS:
        required: true
      CLUSTER_NAME:
        required: true
      CLUSTER_RESOURCE_GROUP:
        required: true
      NAMESPACE:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      AZURE_REPOSITORY:
        required: true
      #AZURE_SERVICE_PRINCIPAL:
         #required: true
      #AZURE_SERVICE_PRINCIPAL_PASSWORD:
         #required : true

jobs:
  build:
    env:
      #REGISTRY_NAME: '${{ inputs.REGISTRY_NAME }}'
      REGISTRY_NAME: '${{ secrets.REGISTRY_NAME }}'
      REGISTRY_USERNAME: '${{ secrets.REGISTRY_USERNAME }}'
      REGISTRY_PASSWORD: '${{ secrets.REGISTRY_PASSWORD}}'
      AZURE_TENANT_ID: '${{ secrets.AZURE_TENANT_ID }}'
      AZURE_SUBSCRIPTION_ID: '${{ secrets.AZURE_SUBSCRIPTION_ID }}'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up ${{inputs.java_version}}
        uses: actions/setup-java@v3
        with:
          java-version: '${{inputs.java_version}}'
          distribution: 'temurin'
          cache: maven
      - name: Maven Build
        run: mvn --batch-mode --update-snapshots install
      #- name: 'Dependency Review'
       # if: ${{inputs.advancedSecurityEnabled}}
        #uses: actions/dependency-review-action@v3
        #with:
         # fail-on-severity: moderate        
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
          name: java-app
          path: '${{ github.workspace }}/target/*.jar'   
      - name: display github worspace
        run: echo "${{ github.workspace }}"
      #- name: Docker Login (Connect to Azure Container registry (ACR))
       # uses: azure/docker-login@v1
        #with:
         # login-server: ${{ secrets.REGISTRY_NAME }}.azurecr.io
          #username: ${{ secrets.username }} 
          #username: ${{ env.REGISTRY_USERNAME }} 
          #password: ${{ secrets.password }}
          #password: ${{ env.REGISTRY_PASSWORD }}
          
      #- name: Azure CLI Login with Managed Identity
        #run: |
          #az login --identity
        #env:
          #AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          #AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
      #- name: Container build and push to a Azure Container registry (ACR)
        #run: |
          #ls -lrt ${{ github.workspace }}
          #ls -lrt ${{ github.workspace }}/target
          #docker build . -t ${{ env.REGISTRY_NAME }}.azurecr.io/myimage:${{ github.sha }}
          #docker push ${{ env.REGISTRY_NAME }}.azurecr.io/myimage:${{ github.sha }}

      - name: azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR build
        id: acr
        uses: azure/acr-build@v1
        with:
          service_principal: ${{ secrets.AZURE_CREDENTIALS }}
          service_principal_password: ${{ secrets.AZURE_CREDENTIALS }}
          tenant: ${{ secrets.AZURE_TENANT_ID }}
          registry: ${{ secrets.REGISTRY_NAME }}
          repository: ${{ secrets.AZURE_REPOSITORY }}
          image: eqhimg1
          #git_access_token: ${{ secrets.git_access_token }}
          folder: src/deployment
          dockerfile: src/deployment/Dockerfile
          branch: main
          #build_args: '[{"arg_one":"value_one"}, {"arg_two":"value_two"}]'
          
      - run: |
          echo "This is the Azure Creds:" 
          echo ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Set Up AKS
        uses: azure/aks-set-context@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          cluster-name: ${{ secrets.CLUSTER_NAME }}
          resource-group: ${{ secrets.CLUSTER_RESOURCE_GROUP }}  
        
      - name: Create namespace if does not exist
        run: |
          kubectl create namespace ${{ secrets.NAMESPACE }} --dry-run -o json | kubectl apply -f -
          
      - run: |
          echo "This is the namespace:"
          echo ${{ secrets.NAMESPACE }} 
        
      - name: Create imagepullsecret for Azure Container registry (ACR)
        uses: azure/k8s-create-secret@v1
        with:
          container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
          container-registry-username: ${{ env.REGISTRY_USERNAME }}
          container-registry-password: ${{ env.REGISTRY_PASSWORD }}
          secret-name: ${{ env.REGISTRY_NAME }}-registry-connection
          namespace: ${{ secrets.NAMESPACE }}
  
      - name: Deploy app to AKS
        uses: azure/k8s-deploy@v1
        with:
         manifests: |
          manifests/deployment.yml
          manifests/service.yml
         images: |
           ${{ env.REGISTRY_NAME }}.azurecr.io/myimage:${{ github.sha }}
         imagepullsecrets: |
           ${{ env.REGISTRY_NAME }}-registry-connection
         namespace: ${{ secrets.NAMESPACE }}
